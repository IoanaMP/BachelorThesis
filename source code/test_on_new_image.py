# -*- coding: utf-8 -*-
"""Test_on_new_image.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xPF353OGs4yDRiZ9MUN51FepGDYhLD0M
"""

from keras.models import load_model
from keras.models import model_from_json
from tensorflow import keras
import imutils
import cv2
import numpy as np
from matplotlib import pyplot as plt


model = keras.models.load_model('/content/Trained_model.h5');


characters = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']
#characters = ['a', 'b', 'c', 'd', 'e', 'f', 'g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']

def sort_contours(conturs, method="LR"):
  #sort conturs of a image
    reverse = False
    i = 0
    if method == "RL" or method == "BT":
        reverse = True
    if method == "TB" or method == "BT":
        i = 1
    boundingBoxes = [cv2.boundingRect(c) for c in conturs]
    (conturs, boundingBoxes) = zip(*sorted(zip(conturs, boundingBoxes),
    key=lambda b:b[1][i], reverse=reverse))
    return (conturs, boundingBoxes)

#----------Read image and draw contours around letters----------------------
image = cv2.imread('image.png')
height, width, depth = image.shape

image = cv2.resize(image, dsize=(width*5,height*4), interpolation=cv2.INTER_CUBIC)
gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)
ret,thresh = cv2.threshold(gray,127,255,cv2.THRESH_BINARY_INV)
kernel = np.ones((5,5), np.uint8)
img_dilation = cv2.dilate(thresh, kernel, iterations=1)
gsblur=cv2.GaussianBlur(img_dilation,(5,5),0)
conturs = cv2.findContours(gsblur.copy(), cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
conturs = imutils.grab_contours(conturs)

m = list()
sorted_ctrs = sort_contours(conturs, method="LR")[0]
prediction = list()
dp = image.copy()
for i, ctr in enumerate(sorted_ctrs):
    x, y, w, h = cv2.boundingRect(ctr)
    cv2.rectangle(dp,(x-75,y-75),( x + w + 75, y + h + 75 ),(90,0,255),9)

plt.imsave("identified_letters.png", dp)
plt.imshow(dp)

#-------Preprocess imge to fit the model-------------------
for i, ctr in enumerate(sorted_ctrs):

    if cv2.contourArea(ctr) > 10:
      x, y, w, h = cv2.boundingRect(ctr)
    roi = image[y-75:y+h+75, x-75:x+w+75]
    roi = cv2.resize(roi, dsize=(28,28), interpolation=cv2.INTER_CUBIC)
    roi = cv2.cvtColor(roi,cv2.COLOR_BGR2GRAY)
    
    roi = np.array(roi)
    t = np.copy(roi)
    t = t / 255.0
    t = 1-t
    t = t.reshape(1,1,28,28)
    m.append(roi)
    pred = model.predict(t)

    res=np.argmax(pred.astype('float32'),axis=1)
    prediction.append(res+1)

test = list()
#---------------- Plot predictions ----------------------

fig, axs = plt.subplots(nrows=len(sorted_ctrs), sharex=True, figsize=(1,len(sorted_ctrs)))

for i in range(len(prediction)):

    test.append(characters[prediction[i][0]])
    axs[i].set_title('Character predicted: '+characters[prediction[i][0]], x=2.5,y=0.24)
    axs[i].imshow(m[i], interpolation='bilinear')

plt.show(test)

print('Predicted word: '+''.join(test))